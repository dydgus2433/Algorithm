Git?
===

제가 어릴 때 항상 궁금해 하던 것이 있습니다.

> 도대체 프로그램은 어떻게 만드는 것일까?

그 해답은 **프로그램을 만드는 프로그램을 사용하는 것**이었습니다.
그럼 그 **프로그램을 만드는 프로그램**을 만드는 프로그램은 무었일까요?

그 해답 역시 **프로그램을 만드는 프로그램**이죠.

Git을 설명하라고 하면 아마 위와 같이 말장난을 하는 듯한 상황에 놓이게 됩니다. 

Git은 아래와 같은 의미로 통용됩니다.
> 소프트웨어의 버전을 관리하기 위한 소프트웨어

---
리눅스의 창시자로 알려진 리누스 토발즈는 "2005년에 Git의 원형이 되는 프로그램이 개발되었다"라고 말했습니다.

리눅스 커널은 수많은 사람들이 공동개발에 참여했기 때문에 역사상 최대 규모의 프로젝트라고 일컬어지는데요, 여러가지 **실험적인** 기능을 넣어보려 시도하기도 해보고, 고성능을 지향하기 위해 여러가지 버전을 관리할 필요가 있었습니다.

하지만 당시 오픈소스로 공개되어 있던 버전 관리 소프트웨어는 기대에 미치지 못하는 수준이었기 때문에, 리누스 토발즈가 직접 개발했다는 이야기가 있습니다.

버전관리 시스템에는 두 가지 부류가 있습니다.

> * 집중형 버전관리 시스템
> * 분산형 버전관리 시스템

![CVCS&DVCS](http://)

**집중형 버전관리 시스템**의 대표적인 예로는 서브버전이 있습니다.

집중형 버전관리 시스템을 사용하게 되면 메인 서버에 있는 코드에 접근하게 됩니다. 그리고 다수의 사용자가 코드를 편집하면 서버에 있는 코드가 수정이 됩니다.

어찌 생각하면 아주 당연한 방식입니다.
집중형 버전관리 시스템의 대표적인 예로는 위키백과가 있습니다.
위키백과의 Git에 대한 문서를 작성했다고 가정합시다. 그럼 많은 Git 전문가들이 Git에 대해 서술해 두겠죠.

**분산형 버전관리 시스템**은 약간 상이한 개념이 추가됩니다.

아마 법정스님이 들으시면 무덤에서 뛰쳐나오실지 모르는데... 현대인들의 소유 욕구를 충족시켜준다고 설명해야 할까요...

Fork라는 기능이 생겼는데, 서버에 존재하는 다른 사람의 소스코드를 콕! 찍어와서 자신의 저장소(Repository)에 복사해 자기 자신만의 새로운 버전을 만들어낼 수 있습니다.

블로그나 미니홈피에서 다른 사람의 글을 퍼오는 기능이라고 생각하시면 이해하기 쉽습니다.
